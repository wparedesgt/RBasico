---
title: "DPLYR"
author: "William V. Paredes"
format: 
  pptx:
    reference-doc: wvparedes.pptx
editor: visual
---

## Quarto

![](imagenes/dplyr.webp)

## Introducción

El paquete dplyr del tidyverse presenta funciones que realizan algunas de las operaciones más comunes cuando se trabaja con dataframes y usa nombres para estas funciones que son relativamente fáciles de recordar.

## Ejemplo

-   Para cambiar la tabla de datos agregando una nueva columna, usamos mutate().
-   Para filtrar la tabla de datos a un subconjunto de filas, usamos filter().
-   Finalmente, para subdividir los datos seleccionando columnas específicas, usamos select().

## Función mutate()

Vamos a aprender a usar esta función de la librería dplyr, esta función nos permite agregar una columna extra con distintos cálculos, o llamando otras funciones. Como ejemplo, vamos a querer que dentro del propio dataframe exista una columna extra en donde agregaremos la tasa de asesinatos por estado.

## Como Funciona?

La función mutate() toma el dataframe como primer argumento y el nombre y los valores de la variable como segundo argumento usando la convención nombre = valores. Entonces, para agregar tasas de asesinatos por cada 100,000 habitantes, usamos:

## Código

```{r, echo=TRUE}
library(tidyverse)
library(dslabs)
data("murders")
murders <- mutate(murders, rate = total/population * 10^5)
```

## Observando

```{r}
head(murders)
```

## OJO

Aunque hemos sobrescrito el objeto de asesinatos original, esto no cambia el objeto que se cargó con datos (murders). Si volvemos a cargar los datos murders, el original sobrescribirá nuestra versión mutada.

## Función filter()

Ahora suponga que queremos filtrar la tabla de datos para mostrar solo las entradas para las cuales la tasa de homicidios es inferior a 0,71.

## Codigo

```{r, echo=TRUE}
filter(murders, rate <= 0.71)
```

## Función select()

Aunque nuestra tabla de datos solo tiene seis columnas, algunas tablas de datos incluyen cientos. Si queremos ver algunas, podemos usar la función dplyr select().

En el siguiente código seleccionamos tres columnas, asignamos esto a un nuevo objeto y luego filtramos el nuevo objeto:

## Código

```{r, echo=TRUE}
new_table <- select(murders, state, region, rate)
filter(new_table, rate <= 0.71)
```

## Operadores de tuberia

Con dplyr podemos realizar una serie de operaciones, por ejemplo, seleccionar y luego filtrar, enviando los resultados de una función a otra y así sucesivamente utilizando lo que se llama operador de tubería o pipes en inglés: %\>%.

## %\>%

Escribimos el código anterior para mostrar tres variables (estado, región, tasa) para los estados que tienen tasas de homicidio por debajo de 0,71. Para hacer esto, definimos el objeto intermedio new_table. En dplyr podemos escribir código que se parezca más a una descripción de lo que queremos hacer sin objetos intermedios:

-   original data → select → filter

Para tal operación, podemos usar la tubería%\>% (pipes). El código se ve así:

## Codigo

```{r, echo=TRUE}
library(tidyverse)
library(dslabs)
data("murders")
murders <- mutate(murders, rate = total/population * 10^5)
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)
```

## ¿Que está pasando aqui?

En general, la tubería envía el resultado del lado izquierdo de la tubería como primer argumento de la función en el lado derecho de la tubería. Aquí hay un ejemplo muy simple:

## Codigo

```{r, echo=TRUE}
16 %>% sqrt() %>% log(base = 2)
```

## Recodificando

```{r, echo=TRUE}
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)
```
