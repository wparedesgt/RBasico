---
title: "Funciones"
author: "William V. Paredes"
format: 
  pptx:
    reference-doc: wvparedes.pptx
editor: visual
---

## Introducción

Una de las particularidades de R, es que va a tratar las funciones como cualquier otro objeto.

Al ser estas mismas tratadas como cualquier otro objeto, tenemos la posibilidad de manipularlas y se pueden incluso pasar como argumentos para que regresen un valor final, se pueden definir en el interior de otra función y solo nuestra creatividad nos dirá que tanto podemos explotar este tema.

## Partes de la función
 ![](imagenes/functions_image0_new.png)

## Función

La función solo cuenta con dos partes, la primera es donde definiremos los argumentos formales que va a utilizar, la segunda es en si el cuerpo en donde haremos las operaciones o lo que necesitemos que la función retorne.

## Esquema General

f <- function("<Argumentos>") { #Argumentos Formales
Expresiones  #Cuerpo de la funcion expresiones
<Valor>   #Valor que regresa la funcion
}  #Fin de la funcion


## Argumentos

Podremos decir que los Argumentos formales es donde nuestra función se comunicará con el ambiente exterior.

## Función V 1
```{r, echo=TRUE}
MiFunc.v1 <- function(x,yyy,z=5, t) {
  w <- x + yyy + z
  w
}
MiFunc.v1(5,10,6)
```

## Función V 2

```{r, echo=TRUE}
MiFunc.V2 <- function(x, yyy, z= 5, t) {
  w <- x + yyy + z
  return(w)
  3.1416  #Aqui no se va a ejecutar nada
}
MiFunc.V2(5,10)
```

## Función V 3
```{r, echo=TRUE}
MiFunc.V3 <- function(x, yyy, z=5, t) {
  x+yyy+z
}
MiFunc.V3(5,10)
```


## Ejemplo para estudio

Vamos a poner el código una función que ejecute los números de fibbonacci, el cual argumenta lo siguiente:

Tenidos o dados los dos primeros números F0 y F1, este calculará cada uno de los siguientes como la suma de los dos anteriores.

## Código

```{r, echo=TRUE}
fibbonacci <- function(n) {
  if(n %in% c(0,1))
    return(1)
  F0 <- 1
  F1 <- 1
  i <- 2
  repeat {
    s <- F0 + F1 #Suma de los fib anteriores
    if(i == n) #Buscar el no.
      return(s)
    F0 <- F1
    F1 <- s
    i <- i+1 #Incrementamos el indice
  }
}
```

## Ejecución

```{r, echo=TRUE}
fibbonacci(8)
```

